{
  "name": "jsic",
  "description": "JS Import Compiler optimizes JavaScript by inlining recursively JavaScript files referenced by $import function ",
  "version": "0.1.6",
  "author": {
    "name": "Dmitry Sheiko",
    "email": "me@dsheiko.com"
  },
  "main": "jsic-module.js",
  "bin": {
    "jscs": "./jsic.js"
  },
  "dependencies": {
    "esprima": "~1.0.4"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jscs": ">= 0.1.3",
    "grunt-contrib-jshint": "~0.4.3",
    "grunt-mocha-cli": "~1.2.1",
    "assert": ">= 0.4.9",
    "mocha": ">= 1.7.4",
    "should": "*"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/fawek/codepainter/raw/master/LICENSE"
    }
  ],
  "maintainers": [
    {
      "name": "Dmitry Sheiko",
      "email": "me@dsheiko.com",
      "url": "http://dsheiko.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/dsheiko/jsic"
  },
  "readme": "JS Import Compiler\r\n==============\r\n\r\nJS Import Compiler is a node.js application that\r\nlooks for `$import` calls recursively in the source JavaScript file and\r\n resolves them in the destination file the same way as LESS/SCSS preprocessors resolve\r\n@import rule in the output CSS.\r\n\r\n\r\n## Why not AMD?\r\n\r\n* JSCS gives a way to reduce the number of HTTP requests by combining all scripts into a single one, what increases the application performance\r\n* Being a build tool JSCS doesn't require any additional JavaScript on client-side\r\n\r\n## Usage\r\n\r\n\r\nDefine dependencies in your code:\r\n\r\n`src/main.js`\r\n```javascript\r\nvar foo = $import( \"./Form/Input/Tel\" );\r\n```\r\n\r\nCreate the dependency source:\r\n\r\n`src/Form/Input/Tel.js`\r\n```javascript\r\nfunction() {\r\n    return {\r\n          prop: \"\",\r\n          method: function(){}\r\n    }\r\n}\r\n```\r\n\r\nRun the compiler:\r\n\r\n```\r\nnode jsic.js src/main.js build/mail.js\r\n```\r\n\r\nExamine the combined file:\r\n\r\n`build/main.js`\r\n```\r\nvar foo = function() {\r\n    return {\r\n          prop: \"\",\r\n          method: function(){}\r\n    }\r\n};\r\n```\r\n\r\n## Linter compatibility\r\n\r\nIn order to have keep dependency source in in valid syntax from a linter prospective\r\n you can assign its body to module.exports, which is ignored by the compiler\r\n```\r\n/**\r\n* The banner will be ignored by compiler\r\n*/\r\nmodule.exports = function() {\r\n    return {\r\n          prop: \"\",\r\n          method: function(){}\r\n    }\r\n};\r\n```\r\n\r\n## JSIC as a grunt task\r\n\r\nPlease find instructions at https://github.com/dsheiko/grunt-jsic\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dsheiko/jsic/issues"
  },
  "homepage": "https://github.com/dsheiko/jsic",
  "_id": "jsic@0.1.6",
  "_shasum": "d0c742f7215198132a4a2714ab6cd8ebfc6536c9",
  "_from": "jsic@>=0.1.6",
  "_resolved": "https://registry.npmjs.org/jsic/-/jsic-0.1.6.tgz"
}
